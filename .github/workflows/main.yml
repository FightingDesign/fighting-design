name: Fighting Design Github Actions

# 当 master 分支 push 代码的时候触发 workflow
on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     node-version: [16.x]

    steps:
      # 下载仓库代码 / 校验
      - name: Checkout
        # uses: actions/checkout@v3 # 这是github官方的一个action，用于clone该仓库的源码到工作流中，
        uses:
          actions/checkout@v3
          # with:
          #   fetch-depth: 0

      # - name: Setup pnpm
      #   uses: pnpm/action-setup@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 6

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'pnpm'

      #   steps :
      #     - uses : actions/checkout@v2
      #     - uses : KSXGitHub/github-actions-setup-pnpm@master
      #     with : version

      # - name: install
      #   uses: pnpm/action-setup@v2
      #   with:
      #     version: 6

      # 将 node 设置为 14
      # - name: Set node version to 16
      #   # uses: pnpm/action-setup@v2
      #   uses: actions/setup-node@master
      #   with:
      #     node-version: '16.x'
      #     cache: 'pnpm'

      # 安装依赖项
      - name: Install
        run: pnpm i

      # 单元测试
      - name: Test
        run: pnpm test

      # 打包组件
      - name: Build components
        run: pnpm build

      # 打打包文档
      - name: Build docs
        run: pnpm build:docs

      # 向Codecov报告覆盖率
      - name: Report coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

          #  on :
          #   - push
          #     - pull_request

          #     jobs :
          #       runs-on : ubuntu-latest
          #       steps :
          #         - uses : actions/checkout@v2
          #         - uses : KSXGitHub/github-actions-setup-pnpm@master
          #         with : version

      # # 缓存依赖
      # - name: Get yarn cache
      #   id: yarn-cache
      #   run: echo "::set-output name=dir::$(yarn cache dir)"
      # - uses: actions/cache@v1
      #   with:
      #     path: ${{ steps.yarn-cache.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      # # 安装依赖
      # - run: yarn

      # # 打包构建
      # - run: yarn build

      # # 发布到 GitHub Pages
      # - name: Deploy
      #   uses: peaceiris/actions-gh-pages@v2
      #   env:
      #     PERSONAL_TOKEN: ${{ secrets.ACCESS_TOKEN }} # 访问秘钥
      #     PUBLISH_BRANCH: gh-pages # 推送分支
      #     PUBLISH_DIR: ./dist # 部署目录
# name: Fighting Design Github Actions

# # 指定此工作流程的触发事件 Event。 此示例使用 推送 事件，即执行 push 后，触发该流水线的执行
# # on: [push]
# on:
#   push:
#     branches: [master]
#   pull_request:
#     branches: [master]

# # Job 作业
# jobs:
#   # 指定一个Job的名称
#   build-components:
#     # 指定该Job在最新版本的 Ubuntu Linux 的 Runner(运行器)上运行
#     runs-on: ubuntu-latest

#     # steps 作业列表
#     steps:
#       - uses: actions/checkout@v3 # Action 获取当前分支的源码
#         with:
#           # “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录
#           fetch-depth: 0

#       - name: Setup Node.js # 名称
#         uses: actions/setup-node@v3
#         with:
#           # 选择要使用的 node 版本
#           #  node-version: [10.x, 12.x, 14.x, 15.x]
#           node-version: '15'

#       # 缓存 node_modules
#       - name: Cache dependencies
#         uses: actions/cache@v2
#         id: yarn-cache
#         with:
#           path: |
#             **/node_modules
#           key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-yarn-

#       # 如果缓存没有命中，安装依赖
#       - name: Install dependencies
#         if: steps.yarn-cache.outputs.cache-hit != 'true'
#         run: yarn --frozen-lockfile

#       # 运行构建脚本
#       - name: Build components
#         run: yarn build

# -----------------------------------

# with:# 参数由 Action 的创建者指定，需要查看创建者的文档
# java-version: '11'
# distribution: 'adopt'
# cache: gradle

# - name: Grant execute permission for gradlew # Shell Command
#   run: chmod +x gradlew
# - name: Build with Gradle
#   run: ./gradlew build

# build:
#   runs-on: ubuntu-latest

#   strategy:
#     matrix:
#       node-version: [16.x]

#   # Step 步骤
#   steps:
#     - uses: actions/checkout@v3
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#     - run: npm ci
#     - run: npm run build
